

/**
 * Qu·∫£n l√Ω thu·ªôc t√≠nh script
 */
function getScriptProps() {
  return PropertiesService.getScriptProperties();
}

/**
 * L·∫•y ID c·ªßa ch·ªß s·ªü h·ªØu bot
 */
function getOwnerId() {
  return getScriptProps().getProperty("BOT_OWNER_ID");
}

/**
 * Thi·∫øt l·∫≠p ID ch·ªß s·ªü h·ªØu bot
 */
function setOwnerId(newId) {
  getScriptProps().setProperty("BOT_OWNER_ID", newId);
}

/**
 * L·∫•y danh s√°ch username ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng bot
 */
function getAllowedUsernames() {
  var raw = getScriptProps().getProperty("ALLOWED_USERNAMES") || "";
  if (!raw) return [];
  return raw.split(",").map(function(u) { return u.trim(); }).filter(String);
}

/**
 * L∆∞u danh s√°ch username
 */
function setAllowedUsernames(arr) {
  var csv = arr.join(",");
  getScriptProps().setProperty("ALLOWED_USERNAMES", csv);
}

/**
 * Th√™m username v√†o danh s√°ch ƒë∆∞·ª£c ph√©p
 */
/**
 * Th√™m username v√†o danh s√°ch ƒë∆∞·ª£c ph√©p v√† c·∫≠p nh·∫≠t sheet UserTracking
 * @param {string} uname - Username c·∫ßn th√™m
 * @param {string} addedBy - ID ho·∫∑c username c·ªßa ng∆∞·ªùi th√™m (n·∫øu c√≥)
 */
function addAllowedUsername(uname, addedBy = "System") {
  uname = uname.toLowerCase();
  var arr = getAllowedUsernames();
  
  if (arr.indexOf(uname) === -1) {
    // Th√™m v√†o m·∫£ng trong properties
    arr.push(uname);
    setAllowedUsernames(arr);
    
    // Th√™m v√†o sheet theo d√µi ng∆∞·ªùi d√πng
    const userSheet = setupUserTrackingSheet();
    
    // Ki·ªÉm tra xem user ƒë√£ t·ªìn t·∫°i trong sheet ch∆∞a
    const data = userSheet.getDataRange().getValues();
    let rowIndex = -1;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0].toLowerCase() === uname) {
        rowIndex = i + 1; // +1 v√¨ index b·∫Øt ƒë·∫ßu t·ª´ 1 trong Sheets
        break;
      }
    }
    
    if (rowIndex > 0) {
      // C·∫≠p nh·∫≠t th√¥ng tin user
      userSheet.getRange(rowIndex, 2).setValue(addedBy);
      userSheet.getRange(rowIndex, 3).setValue(new Date());
      userSheet.getRange(rowIndex, 4).setValue("Active");
    } else {
      // Th√™m user m·ªõi
      userSheet.appendRow([
        uname,
        addedBy,
        new Date(),
        "Active"
      ]);
    }
    
    return true;
  }
  
  return false;
}

/**
 * Ki·ªÉm tra username c√≥ trong danh s√°ch cho ph√©p kh√¥ng
 */
function isUsernameAllowed(uname) {
  uname = (uname || "").toLowerCase();
  var arr = getAllowedUsernames();
  return (arr.indexOf(uname) !== -1);
}

/**
 * X√≥a username kh·ªèi danh s√°ch cho ph√©p
 */
/**
 * X√≥a username kh·ªèi danh s√°ch cho ph√©p v√† c·∫≠p nh·∫≠t sheet UserTracking
 */
function removeAllowedUsername(uname, removedBy = "System") {
  uname = (uname || "").toLowerCase();
  var arr = getAllowedUsernames();
  var index = arr.indexOf(uname);
  
  if (index !== -1) {
    // X√≥a kh·ªèi m·∫£ng trong properties
    arr.splice(index, 1);
    setAllowedUsernames(arr);
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong sheet theo d√µi ng∆∞·ªùi d√πng
    const userSheet = setupUserTrackingSheet();
    const data = userSheet.getDataRange().getValues();
    let rowIndex = -1;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0].toLowerCase() === uname) {
        rowIndex = i + 1;
        break;
      }
    }
    
    if (rowIndex > 0) {
      // ƒê√°nh d·∫•u user l√† kh√¥ng ho·∫°t ƒë·ªông
      userSheet.getRange(rowIndex, 4).setValue("Removed");
    }
    
    return true;
  }
  
  return false;
}

/**
 * Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot kh√¥ng
 */
function hasPermission(userId, username) {
  return userId.toString() === getOwnerId() || isUsernameAllowed(username);
}

/**
 * H√†m c√†i ƒë·∫∑t webhook cho bot
 */
function setupWebhook() {
  const response = UrlFetchApp.fetch(`${API}/setWebhook?url=${WEBHOOK_URL}`);
  Logger.log(response.getContentText());
  return response.getContentText();
}

/**
 * Ki·ªÉm tra tr·∫°ng th√°i webhook hi·ªán t·∫°i
 */
function getWebhookInfo() {
  const response = UrlFetchApp.fetch(`${API}/getWebhookInfo`);
  Logger.log(response.getContentText());
  return JSON.parse(response.getContentText());
}

/**
 * X·ª≠ l√Ω request t·ª´ Telegram
 */
function doPost(e) {
  const update = JSON.parse(e.postData.contents);
  const msg = update.message;
  if (!msg) return;
  
  const chatId = msg.chat.id.toString();
  const userId = msg.from.id;
  const usernameRaw = msg.from.username || "";
  
  ensureSheet(chatId); // t·∫°o Sheet n·∫øu ch∆∞a c√≥
  // T·ª± ƒë·ªông c·∫≠p nh·∫≠t sheet theo d√µi nh√≥m n·∫øu l√† group chat
if (msg.chat.type === "group" || msg.chat.type === "supergroup") {
  updateGroupTrackingInfo(chatId);
}
  // N·∫øu ch∆∞a c√≥ owner, h√£y thi·∫øt l·∫≠p
  const ownerId = getOwnerId();
  if (!ownerId) {
    setOwnerId(userId.toString());
    sendMessage(chatId, `B·∫°n (ID:${userId}) ƒë√£ tr·ªü th√†nh ch·ªß s·ªü h·ªØu Bot.`);
  }
  
  try {
    // X·ª≠ l√Ω l·ªánh qu·∫£n l√Ω quy·ªÅn truy c·∫≠p
    if (msg.text) {
      const message = msg.text;
      
      // --- X·ª≠ l√Ω l·ªánh set users
if (message.startsWith('/set ')) {
  if (userId.toString() !== getOwnerId()) {
    sendMessage(chatId, "‚ùå B·∫°n kh√¥ng ph·∫£i owner, kh√¥ng th·ªÉ set.");
    return;
  }
  
  const parts = message.trim().split(' ');
  if (parts.length < 2) {
    sendMessage(chatId, "‚ùå C√∫ ph√°p: /set @username1 @username2...");
    return;
  }
  
  const added = [];
  const addedBy = msg.from.username || msg.from.first_name || userId.toString();
  
  for (let i = 1; i < parts.length; i++) {
    const newUser = parts[i].replace('@', ''); // Lo·∫°i b·ªè @ n·∫øu c√≥
    if (newUser) {
      if (addAllowedUsername(newUser, addedBy)) {
        added.push('@' + newUser);
      }
    }
  }
  
  if (added.length > 0) {
    sendMessage(chatId, `‚úÖ ƒê√£ cho ph√©p ${added.join(', ')} ƒë∆∞·ª£c s·ª≠ d·ª•ng bot.`);
  } else {
    sendMessage(chatId, "‚ùå Kh√¥ng c√≥ username h·ª£p l·ªá ƒë·ªÉ th√™m.");
  }
  return;
}
      // --- X·ª≠ l√Ω l·ªánh unset users
if (message.startsWith('/unset ')) {
  if (userId.toString() !== getOwnerId()) {
    sendMessage(chatId, "‚ùå B·∫°n kh√¥ng ph·∫£i owner, kh√¥ng th·ªÉ unset.");
    return;
  }
  
  const parts = message.trim().split(' ');
  if (parts.length < 2) {
    sendMessage(chatId, "‚ùå C√∫ ph√°p: /unset @username1 @username2...");
    return;
  }
  
  const removed = [];
  const removedBy = msg.from.username || msg.from.first_name || userId.toString();
  
  for (let i = 1; i < parts.length; i++) {
    const user = parts[i].replace('@', ''); // Lo·∫°i b·ªè @ n·∫øu c√≥
    if (user && removeAllowedUsername(user, removedBy)) {
      removed.push('@' + user);
    }
  }
  
  if (removed.length > 0) {
    sendMessage(chatId, `‚úÖ ƒê√£ x√≥a ${removed.join(', ')} kh·ªèi danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p.`);
  } else {
    sendMessage(chatId, "‚ùå Kh√¥ng t√¨m th·∫•y username n√†o trong danh s√°ch ƒë·ªÉ x√≥a.");
  }
  return;
}
      
      // --- X·ª≠ l√Ω l·ªánh xem danh s√°ch ng∆∞·ªùi d√πng
if (message.startsWith('/users')) {
  if (!hasPermission(userId, usernameRaw)) {
    sendMessage(chatId, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch ng∆∞·ªùi d√πng.");
    return;
  }
  
  const ownerInfo = `üëë Owner: ID ${getOwnerId()}`;
  
  // L·∫•y d·ªØ li·ªáu t·ª´ sheet UserTracking
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const userSheet = ss.getSheetByName("UserTracking");
  
  if (!userSheet) {
    // N·∫øu ch∆∞a c√≥ sheet, hi·ªÉn th·ªã theo c√°ch c≈©
    const users = getAllowedUsernames();
    if (users.length > 0) {
      const usersList = users.map(u => '@' + u).join(', ');
      sendMessage(chatId, `${ownerInfo}\nüë• Danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p: ${usersList}`);
    } else {
      sendMessage(chatId, `${ownerInfo}\nüë• Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒë∆∞·ª£c th√™m v√†o danh s√°ch.`);
    }
    return;
  }
  
  // L·∫•y d·ªØ li·ªáu t·ª´ sheet
  const data = userSheet.getDataRange().getValues();
  let activeUsers = [];
  
  for (let i = 1; i < data.length; i++) {
    if (data[i][0] && data[i][3] === "Active") {
      activeUsers.push({
        username: data[i][0],
        addedBy: data[i][1],
        addedTime: data[i][2]
      });
    }
  }
  
  if (activeUsers.length > 0) {
    let message = `${ownerInfo}\nüë• *Danh s√°ch ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p:*\n\n`;
    
    activeUsers.forEach(user => {
      const addedDate = user.addedTime instanceof Date ? 
        Utilities.formatDate(user.addedTime, Session.getScriptTimeZone(), "dd/MM/yyyy HH:mm") : 
        "Unknown date";
      
      message += `- @${user.username} (th√™m b·ªüi: ${user.addedBy}, ng√†y: ${addedDate})\n`;
    });
    
    sendMessage(chatId, message);
  } else {
    sendMessage(chatId, `${ownerInfo}\nüë• Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒë∆∞·ª£c th√™m v√†o danh s√°ch.`);
  }
  return;
}
      // --- 1) X·ª≠ l√Ω /setgroup <code>
      if (message.startsWith('/setgroup')) {
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p tr∆∞·ªõc khi th·ª±c hi·ªán l·ªánh
        if (!hasPermission(userId, usernameRaw)) {
          sendMessage(chatId, "‚ùåKh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!/ÊùÉÈôê‰∏çË∂≥ÔºåÊó†Ê≥ïÊâßË°åÊ≠§ÂëΩ‰ª§!");
          return;
        }
        
        const code = (message.split(/\s+/)[1] || '').toLowerCase();
        if (!code) {
          sendMessage(chatId, "‚ùå Vui l√≤ng nh·∫≠p m√£ nh√≥m. V√≠ d·ª•: `/setgroup a`");
          return;
        }
        setGroupCode(code, chatId);
        sendMessage(chatId, `‚úÖ Nh√≥m n√†y ƒë√£ g√°n m√£/ËØ•Áæ§Â∑≤ÂàÜÈÖçÁºñÁ†Å ${code}`);
        return;
      }
      
      // --- 2) X·ª≠ l√Ω /help
      if (message.startsWith('/help')) {
        let helpText = `*H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot:*
- ƒê·ªÉ g√°n m√£ cho nh√≥m: \`/setgroup <m√£>\` (V√≠ d·ª•: \`/setgroup a\`)
- ƒê·ªÉ copy tin nh·∫Øn: Reply tin nh·∫Øn c·∫ßn chuy·ªÉn v√† ch·ªâ nh·∫≠p m√£ c·ªßa nh√≥m ƒë√≠ch
- ƒê·ªÉ xem danh s√°ch m√£ nh√≥m: \`/listgroups\`
- Bot h·ªó tr·ª£ copy: vƒÉn b·∫£n, ·∫£nh, video, file, sticker, voice, √¢m thanh`;
        
        // N·∫øu l√† owner ho·∫∑c ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p, hi·ªÉn th·ªã th√™m c√°c l·ªánh qu·∫£n l√Ω
        if (hasPermission(userId, usernameRaw)) {
          helpText += `\n\n*L·ªánh qu·∫£n l√Ω ng∆∞·ªùi d√πng:*
- Xem danh s√°ch ng∆∞·ªùi d√πng: \`/users\``;
          
          // Ch·ªâ hi·ªÉn th·ªã cho owner
          if (userId.toString() === getOwnerId()) {
            helpText += `
- Th√™m ng∆∞·ªùi d√πng: \`/set @username1 @username2...\`
- X√≥a ng∆∞·ªùi d√πng: \`/unset @username1 @username2...\``;
          }
        }
        
        sendMessage(chatId, helpText);
        return;
      }
      
      // --- 3) X·ª≠ l√Ω /listgroups
if (message.startsWith('/listgroups')) {
  // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
  if (!hasPermission(userId, usernameRaw)) {
    sendMessage(chatId, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!");
    return;
  }
  
  // L·∫•y danh s√°ch nh√≥m t·ª´ sheet theo d√µi
  const groups = getGroupsFromTrackingSheet();
  
  if (groups.length === 0) {
    sendMessage(chatId, "‚ùå Ch∆∞a c√≥ nh√≥m n√†o ƒë∆∞·ª£c theo d√µi.");
    return;
  }
  
  // L·ªçc c√°c nh√≥m c√≥ m√£ code
  const groupsWithCode = groups.filter(g => g.code);
  const allGroups = groups;
  
  let message = "*Danh s√°ch nh√≥m ƒë∆∞·ª£c theo d√µi:*\n\n";
  
  if (groupsWithCode.length > 0) {
    message += "*Nh√≥m c√≥ m√£ code:*\n";
    groupsWithCode.forEach(g => {
      message += `- M√£ \`${g.code}\`: ${g.name} (ID: ${g.id})\n`;
    });
    message += "\n";
  }
  
  // Hi·ªÉn th·ªã c√°c nh√≥m ch∆∞a c√≥ code
  const groupsWithoutCode = allGroups.filter(g => !g.code);
  if (groupsWithoutCode.length > 0) {
    message += "*Nh√≥m ch∆∞a c√≥ m√£ code:*\n";
    groupsWithoutCode.forEach(g => {
      message += `- ${g.name} (ID: ${g.id})\n`;
    });
  }
  
  sendMessage(chatId, message);
  return;
}
      // --- 4) X·ª≠ l√Ω /spreadsheet - xem link spreadsheet
      if (message.startsWith('/spreadsheet')) {
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if (!hasPermission(userId, usernameRaw)) {
          return;
        }
        
        const ss = SpreadsheetApp.getActiveSpreadsheet();
        const spreadsheetUrl = ss.getUrl();
        sendMessage(chatId, `üìä Link Google Spreadsheet ƒë·ªÉ xem log: ${spreadsheetUrl}`);
        return;
      }
      
      // --- 5) X·ª≠ l√Ω reply "[code] [n·ªôi dung b·ªï sung]"
      if (msg.reply_to_message && message) {
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p
        if (!hasPermission(userId, usernameRaw)) {
          return;
        }
        
        // T√°ch m√£ code v√† n·ªôi dung b·ªï sung (n·∫øu c√≥)
        let parts = message.trim().split(/\s+/);
        const code = parts[0].toLowerCase(); // M√£ code lu√¥n l√† ph·∫ßn ƒë·∫ßu ti√™n
        
        // N·∫øu c√≥ n·ªôi dung b·ªï sung, n·ªëi t·∫•t c·∫£ c√°c ph·∫ßn c√≤n l·∫°i
        let additionalContent = "";
        if (parts.length > 1) {
          additionalContent = parts.slice(1).join(" ");
        }
        
        const destId = getGroupByCode(code);
        
        if (!destId) {
          sendMessage(chatId, `‚ùå Kh√¥ng t√¨m th·∫•y nh√≥m v·ªõi m√£ "${code}"`);
          return;
        }
        
        // X√°c ƒë·ªãnh lo·∫°i n·ªôi dung c·ªßa tin nh·∫Øn g·ªëc
        const replyMsg = msg.reply_to_message;
        const contentType = getMessageType(replyMsg);
        
        // Copy tin nh·∫Øn thay v√¨ chuy·ªÉn ti·∫øp
        const result = copyMessage(replyMsg, destId);
        
        if (result.success) {
          // N·∫øu c√≥ n·ªôi dung b·ªï sung, g·ª≠i th√™m m·ªôt tin nh·∫Øn n·ªØa
          if (additionalContent) {
            sendMessage(destId, additionalContent);
          }
          
          // L∆∞u th√¥ng tin ng∆∞·ªùi g·ª≠i g·ªëc trong spreadsheet
          const originalSender = replyMsg.from.username || replyMsg.from.first_name || "Unknown";
          
          // Ghi log v·ªõi th√¥ng tin v·ªÅ lo·∫°i n·ªôi dung
          logToSheets(msg, destId, code, contentType, originalSender);
          
          // Th√¥ng b√°o th√†nh c√¥ng, k√®m theo tr·∫°ng th√°i n·ªôi dung b·ªï sung n·∫øu c√≥
          let successMsg = `‚úÖƒê√£ copy ƒë·∫øn nh√≥m/Â∑≤Â∞ÜËΩ¨ÂèëÂà∞ ${code}`;
          if (additionalContent) {
            successMsg += ` (k√®m n·ªôi dung b·ªï sung)`;
          }
          sendMessage(chatId, successMsg);
        } else {
          sendMessage(chatId, `‚ùå Kh√¥ng th·ªÉ copy/Êó†Ê≥ïËΩ¨ÂèëÂà∞: ${result.error}`);
        }
        return;
      }
    }
  } catch (error) {
    Logger.log(`Error: ${error}`);
    sendMessage(chatId, "‚ùå C√≥ l·ªói x·∫£y ra: " + error.toString());
  }
}

/**
 * Copy tin nh·∫Øn thay v√¨ chuy·ªÉn ti·∫øp
 */
function copyMessage(origMsg, destId) {
  try {
    // X·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n
    if (origMsg.text) {
      sendMessage(destId, origMsg.text);
      return { success: true };
    }
    
    // X·ª≠ l√Ω ·∫£nh
    else if (origMsg.photo) {
      const photo = origMsg.photo[origMsg.photo.length - 1]; // L·∫•y ·∫£nh ch·∫•t l∆∞·ª£ng cao nh·∫•t
      const caption = origMsg.caption || '';
      
      call(`${API}/sendPhoto`, {
        chat_id: destId,
        photo: photo.file_id,
        caption: caption
      });
      return { success: true };
    }
    
    // X·ª≠ l√Ω video
    else if (origMsg.video) {
      const caption = origMsg.caption || '';
      
      call(`${API}/sendVideo`, {
        chat_id: destId,
        video: origMsg.video.file_id,
        caption: caption
      });
      return { success: true };
    }
    
    // X·ª≠ l√Ω file (document)
    else if (origMsg.document) {
      const caption = origMsg.caption || '';
      
      call(`${API}/sendDocument`, {
        chat_id: destId,
        document: origMsg.document.file_id,
        caption: caption
      });
      return { success: true };
    }
    
    // X·ª≠ l√Ω sticker
    else if (origMsg.sticker) {
      call(`${API}/sendSticker`, {
        chat_id: destId,
        sticker: origMsg.sticker.file_id
      });
      return { success: true };
    }
    
    // X·ª≠ l√Ω audio
    else if (origMsg.audio) {
      const caption = origMsg.caption || '';
      
      call(`${API}/sendAudio`, {
        chat_id: destId,
        audio: origMsg.audio.file_id,
        caption: caption
      });
      return { success: true };
    }
    
    // X·ª≠ l√Ω voice message
    else if (origMsg.voice) {
      const caption = origMsg.caption || '';
      
      call(`${API}/sendVoice`, {
        chat_id: destId,
        voice: origMsg.voice.file_id,
        caption: caption
      });
      return { success: true };
    }
    
    // X·ª≠ l√Ω animation (GIF)
    else if (origMsg.animation) {
      const caption = origMsg.caption || '';
      
      call(`${API}/sendAnimation`, {
        chat_id: destId,
        animation: origMsg.animation.file_id,
        caption: caption
      });
      return { success: true };
    }
    
    // Tr∆∞·ªùng h·ª£p kh√¥ng h·ªó tr·ª£
    else {
      return { 
        success: false, 
        error: "Lo·∫°i tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·ªÉ copy, h√£y th·ª≠ chuy·ªÉn ti·∫øp" 
      };
    }
  } catch (error) {
    Logger.log(`Copy error: ${error}`);
    return { success: false, error: error.toString() };
  }
}
/**
 * T·∫°o ho·∫∑c c·∫≠p nh·∫≠t sheet theo d√µi ng∆∞·ªùi d√πng
 */
function setupUserTrackingSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // T√¨m ho·∫∑c t·∫°o sheet UserTracking
  let userSheet = ss.getSheetByName("UserTracking");
  if (!userSheet) {
    userSheet = ss.insertSheet("UserTracking");
    
    // Thi·∫øt l·∫≠p n·ªôi dung c∆° b·∫£n
    userSheet.appendRow(["Username", "Added By", "Added Time", "Status"]);
    
    // ƒê·ªãnh d·∫°ng sheet
    userSheet.getRange(1, 1, 1, 4).setFontWeight("bold");
    userSheet.setColumnWidth(1, 150); // Username
    userSheet.setColumnWidth(2, 150); // Added By
    userSheet.setColumnWidth(3, 180); // Th·ªùi gian
    userSheet.setColumnWidth(4, 100); // Tr·∫°ng th√°i
    userSheet.setFrozenRows(1);
  }
  
  return userSheet;
}
/**
 * C·∫≠p nh·∫≠t Config sheet v√† ƒë·∫£m b·∫£o t·ªìn t·∫°i
 */
function setupConfigSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // T√¨m ho·∫∑c t·∫°o sheet Config
  let configSheet = ss.getSheetByName("Config");
  if (!configSheet) {
    configSheet = ss.insertSheet("Config");
    
    // Thi·∫øt l·∫≠p n·ªôi dung c∆° b·∫£n
    configSheet.appendRow(["Bot Info", "Value"]);
    configSheet.appendRow(["Bot Token", "Protected"]);
    configSheet.appendRow(["Last Update", new Date()]);
    configSheet.appendRow(["Version", "1.0"]);
    configSheet.appendRow(["Owner ID", getOwnerId() || "Not set"]);
    configSheet.appendRow(["", ""]);
    configSheet.appendRow(["Group Codes", "Group Info"]);
    
    // ƒê·ªãnh d·∫°ng sheet Config
    configSheet.getRange(1, 1, 1, 2).setFontWeight("bold");
    configSheet.getRange(7, 1, 1, 2).setFontWeight("bold");
    configSheet.setColumnWidth(1, 200);
    configSheet.setColumnWidth(2, 300);
  }
  
  return configSheet;
}

/**
 * ƒê·∫£m b·∫£o m·ªói nh√≥m c√≥ Sheet ri√™ng trong Spreadsheet hi·ªán t·∫°i
 */
function ensureSheet(chatId) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    let sheet = null;
    
    // T√¨m sheet theo chatId ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
    try {
      sheet = ss.getSheetByName(`Group_${chatId}`);
    } catch (e) {
      // Sheet kh√¥ng t·ªìn t·∫°i
    }
    
    if (!sheet) {
      // T·∫°o m·ªõi sheet cho nh√≥m n√†y
      sheet = ss.insertSheet(`Group_${chatId}`);
      
      // T·∫°o header cho sheet m·ªõi
      sheet.appendRow([
        "Th·ªùi gian", 
        "Ng∆∞·ªùi x·ª≠ l√Ω", 
        "ID tin nh·∫Øn", 
        "M√£ nh√≥m ƒë√≠ch", 
        "ID nh√≥m ƒë√≠ch",
        "Lo·∫°i n·ªôi dung",
        "Ng∆∞·ªùi g·ª≠i g·ªëc"
      ]);
      
      // ƒê·ªãnh d·∫°ng header
      sheet.getRange(1, 1, 1, 7).setFontWeight("bold");
      sheet.setFrozenRows(1);
      
      // Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
      sheet.setColumnWidth(1, 180); // Th·ªùi gian
      sheet.setColumnWidth(2, 150); // Ng∆∞·ªùi x·ª≠ l√Ω
      sheet.setColumnWidth(4, 100); // M√£ nh√≥m
      sheet.setColumnWidth(6, 120); // Lo·∫°i n·ªôi dung
      sheet.setColumnWidth(7, 150); // Ng∆∞·ªùi g·ª≠i g·ªëc
      
      // ƒê·∫£m b·∫£o c√≥ sheet Config v√† c·∫≠p nh·∫≠t th√¥ng tin nh√≥m
      setupConfigSheet();
      updateGroupInfo(chatId);
    }
    
    return sheet;
  } catch (error) {
    Logger.log(`Error ensuring sheet: ${error}`);
    return null;
  }
}

/**
 * C·∫≠p nh·∫≠t th√¥ng tin nh√≥m trong sheet Config
 */
function updateGroupInfo(chatId) {
  try {
    // L·∫•y th√¥ng tin nh√≥m t·ª´ Telegram
    const response = UrlFetchApp.fetch(`${API}/getChat?chat_id=${chatId}`);
    const chatInfo = JSON.parse(response.getContentText()).result;
    const chatName = chatInfo.title || `Private (${chatId})`;
    
    // L∆∞u t√™n nh√≥m v√†o properties
    const props = PropertiesService.getScriptProperties();
    const groupNames = JSON.parse(props.getProperty('groupNames') || '{}');
    groupNames[chatId] = chatName;
    props.setProperty('groupNames', JSON.stringify(groupNames));
    
    // C·∫≠p nh·∫≠t sheet Config
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName("Config");
    
    // T√¨m d√≤ng tr·ªëng trong ph·∫ßn Group Codes
    let startRow = 8; // D√≤ng b·∫Øt ƒë·∫ßu ph·∫ßn nh√≥m (sau header)
    let foundEmpty = false;
    let foundExisting = false;
    let emptyRow = 0;
    
    // T√¨m xem nh√≥m ƒë√£ t·ªìn t·∫°i ch∆∞a ho·∫∑c t√¨m d√≤ng tr·ªëng
    while (!foundExisting && startRow < 100) { // Gi·ªõi h·∫°n 100 d√≤ng ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
      const value = configSheet.getRange(startRow, 1).getValue();
      
      if (value === `Group ${chatId}`) {
        foundExisting = true;
        break;
      }
      
      if (!foundEmpty && value === "") {
        foundEmpty = true;
        emptyRow = startRow;
      }
      
      startRow++;
    }
    
    // Th√™m m·ªõi ho·∫∑c c·∫≠p nh·∫≠t
    if (foundExisting) {
      configSheet.getRange(startRow, 2).setValue(chatName);
    } else if (foundEmpty) {
      configSheet.getRange(emptyRow, 1).setValue(`Group ${chatId}`);
      configSheet.getRange(emptyRow, 2).setValue(chatName);
    } else {
      // N·∫øu kh√¥ng t√¨m th·∫•y d√≤ng tr·ªëng, th√™m d√≤ng m·ªõi
      configSheet.appendRow([`Group ${chatId}`, chatName]);
    }
    
  } catch (error) {
    Logger.log(`Error updating group info: ${error}`);
  }
}

/**
 * L·∫•y t√™n nh√≥m t·ª´ ID
 */
function getGroupName(chatId) {
  const props = PropertiesService.getScriptProperties();
  const groupNames = JSON.parse(props.getProperty('groupNames') || '{}');
  return groupNames[chatId];
}

/**
 * X√°c ƒë·ªãnh lo·∫°i n·ªôi dung c·ªßa tin nh·∫Øn
 */
function getMessageType(message) {
  if (message.photo) return "·∫£nh";
  if (message.video) return "video";
  if (message.document) return "file";
  if (message.audio) return "audio";
  if (message.voice) return "voice message";
  if (message.sticker) return "sticker";
  if (message.animation) return "animation";
  if (message.text) return "tin nh·∫Øn vƒÉn b·∫£n";
  return "n·ªôi dung kh√°c";
}

/**
 * T·∫°o URL ƒë·ªÉ truy c·∫≠p webapp
 */
function getWebAppURL() {
  return ScriptApp.getService().getUrl();
}

/**
 * Trang web ƒë∆°n gi·∫£n khi truy c·∫≠p v√†o webapp
 */
function doGet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ownerId = getOwnerId() || "Not set";
  
  return HtmlService.createHtmlOutput(`
    <h1>Telegram Bot Webhook Service</h1>
    <p>Bot ƒëang ho·∫°t ƒë·ªông.</p>
    <p>Webhook URL: ${getWebAppURL()}</p>
    <p>Owner ID: ${ownerId}</p>
    <p>Spreadsheet: <a href="${ss.getUrl()}" target="_blank">Xem log</a></p>
  `);
}

/* ---------- Helpers ---------- */

/**
 * G·ªçi API Telegram
 */
function call(url, payload) {
  try {
    return UrlFetchApp.fetch(url, {
      method: 'post',
      payload: payload || {},
      muteHttpExceptions: true
    });
  } catch (error) {
    Logger.log(`API call error: ${error}`);
    throw error;
  }
}

/**
 * G·ª≠i tin nh·∫Øn ƒë·∫øn chat
 */
function sendMessage(chatId, text) {
  call(`${API}/sendMessage`, {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown'
  });
}

/**
 * L∆∞u m√£ code c·ªßa nh√≥m
 */
function setGroupCode(code, chatId) {
  const props = PropertiesService.getScriptProperties();
  const map = JSON.parse(props.getProperty('codeMap') || '{}');
  map[code] = chatId;
  props.setProperty('codeMap', JSON.stringify(map));
  
  // C·∫≠p nh·∫≠t th√¥ng tin trong sheet Config
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const configSheet = ss.getSheetByName("Config");
    if (!configSheet) {
      setupConfigSheet();
    }
    
    // T√¨m d√≤ng v·ªõi th√¥ng tin nh√≥m n√†y
    let startRow = 8;
    let found = false;
    
    while (startRow < 100) {
      const value = configSheet.getRange(startRow, 1).getValue();
      if (value === `Group ${chatId}`) {
        found = true;
        break;
      }
      if (value === "") {
        break;
      }
      startRow++;
    }
    
    // C·∫≠p nh·∫≠t th√¥ng tin m√£ code
    if (found) {
      const groupName = getGroupName(chatId) || chatId;
      configSheet.getRange(startRow, 2).setValue(`${groupName} (code: ${code})`);
    }
  } catch (error) {
    Logger.log(`Error updating config sheet: ${error}`);
  }
  updateGroupTrackingInfo(chatId, code);
}

/**
 * L·∫•y ID nh√≥m t·ª´ m√£ code
 */
function getGroupByCode(code) {
  const map = JSON.parse(PropertiesService.getScriptProperties().getProperty('codeMap') || '{}');
  return map[code];
}

/**
 * L·∫•y t·∫•t c·∫£ c√°c nh√≥m v√† m√£ code
 */
function getAllGroups() {
  const props = PropertiesService.getScriptProperties();
  return JSON.parse(props.getProperty('codeMap') || '{}');
}

/**
 * Ghi log v√†o Sheets
 */
function logToSheets(msg, destId, code, contentType = "tin nh·∫Øn vƒÉn b·∫£n", originalSender = "") {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    
    // Log v√†o sheet c·ªßa nh√≥m ngu·ªìn
    const sourceSheet = ss.getSheetByName(`Group_${msg.chat.id}`);
    if (sourceSheet) {
      sourceSheet.appendRow([
        new Date(), 
        msg.from.username || msg.from.first_name || "Unknown",
        msg.message_id, 
        code, 
        destId,
        contentType,
        originalSender
      ]);
    }
    
    // Log v√†o sheet c·ªßa nh√≥m ƒë√≠ch
    const destSheet = ss.getSheetByName(`Group_${destId}`);
    if (destSheet) {
      destSheet.appendRow([
        new Date(), 
        msg.from.username || msg.from.first_name || "Unknown",
        msg.message_id, 
        code, 
        destId,
        contentType,
        originalSender
      ]);
    }
  } catch (error) {
    Logger.log(`Error logging to sheets: ${error}`);
  }
}

/**
 * Kh·ªüi t·∫°o bot t·ª´ ƒë·∫ßu
 */
function initializeBot() {
  // Thi·∫øt l·∫≠p sheet Config
  setupConfigSheet();
  // Thi·∫øt l·∫≠p sheet theo d√µi nh√≥m
setupGroupTrackingSheet();
setupUserTrackingSheet(); // Th√™m d√≤ng n√†y
  
  // C·∫≠p nh·∫≠t ng√†y kh·ªüi t·∫°o
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const configSheet = ss.getSheetByName("Config");
  configSheet.getRange(3, 2).setValue(new Date());
  configSheet.getRange(5, 2).setValue(getOwnerId() || "Not set");
  
  return "Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng trong Spreadsheet hi·ªán t·∫°i!";
}

/**
 * H√†m ki·ªÉm tra tr·∫°ng th√°i bot
 */
function checkBotStatus() {
  const url = `${API}/getMe`;
  try {
    const response = UrlFetchApp.fetch(url);
    const botInfo = JSON.parse(response.getContentText());
    return `Bot @${botInfo.result.username} ƒëang ho·∫°t ƒë·ªông`;
  } catch (error) {
    return `L·ªói k·∫øt n·ªëi ƒë·∫øn bot: ${error}`;
  }
}
/**
 * T·∫°o ho·∫∑c c·∫≠p nh·∫≠t sheet theo d√µi nh√≥m
 */
function setupGroupTrackingSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // T√¨m ho·∫∑c t·∫°o sheet GroupTracking
  let trackingSheet = ss.getSheetByName("GroupTracking");
  if (!trackingSheet) {
    trackingSheet = ss.insertSheet("GroupTracking");
    
    // Thi·∫øt l·∫≠p n·ªôi dung c∆° b·∫£n
    trackingSheet.appendRow(["Group ID", "Group Name", "Join Time", "Code"]);
    
    // ƒê·ªãnh d·∫°ng sheet
    trackingSheet.getRange(1, 1, 1, 4).setFontWeight("bold");
    trackingSheet.setColumnWidth(1, 150); // ID
    trackingSheet.setColumnWidth(2, 250); // T√™n
    trackingSheet.setColumnWidth(3, 180); // Th·ªùi gian
    trackingSheet.setColumnWidth(4, 100); // M√£ code
    trackingSheet.setFrozenRows(1);
  }
  
  return trackingSheet;
}

/**
 * C·∫≠p nh·∫≠t th√¥ng tin nh√≥m trong sheet theo d√µi
 */
function updateGroupTrackingInfo(chatId, code = "") {
  try {
    // ƒê·∫£m b·∫£o sheet GroupTracking t·ªìn t·∫°i
    const trackingSheet = setupGroupTrackingSheet();
    
    // L·∫•y th√¥ng tin nh√≥m t·ª´ Telegram
    const response = UrlFetchApp.fetch(`${API}/getChat?chat_id=${chatId}`);
    const chatInfo = JSON.parse(response.getContentText()).result;
    const chatName = chatInfo.title || `Private (${chatId})`;
    
    // T√¨m nh√≥m trong sheet
    const data = trackingSheet.getDataRange().getValues();
    let rowIndex = -1;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0].toString() === chatId.toString()) {
        rowIndex = i + 1; // +1 v√¨ index b·∫Øt ƒë·∫ßu t·ª´ 1 trong Sheets
        break;
      }
    }
    
    if (rowIndex > 0) {
      // C·∫≠p nh·∫≠t t√™n nh√≥m
      trackingSheet.getRange(rowIndex, 2).setValue(chatName);
      
      // C·∫≠p nh·∫≠t code n·∫øu ƒë∆∞·ª£c cung c·∫•p
      if (code) {
        trackingSheet.getRange(rowIndex, 4).setValue(code);
      }
    } else {
      // Th√™m nh√≥m m·ªõi
      trackingSheet.appendRow([
        chatId, 
        chatName, 
        new Date(), 
        code
      ]);
    }
    
    return true;
  } catch (error) {
    Logger.log(`Error updating group tracking: ${error}`);
    return false;
  }
}

/**
 * L·∫•y danh s√°ch nh√≥m t·ª´ sheet theo d√µi
 */
function getGroupsFromTrackingSheet() {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const trackingSheet = ss.getSheetByName("GroupTracking");
    
    if (!trackingSheet) {
      return [];
    }
    
    const data = trackingSheet.getDataRange().getValues();
    const groups = [];
    
    // B·ªè qua h√†ng ti√™u ƒë·ªÅ
    for (let i = 1; i < data.length; i++) {
      if (data[i][0]) {
        groups.push({
          id: data[i][0].toString(),
          name: data[i][1],
          joinTime: data[i][2],
          code: data[i][3] || ""
        });
      }
    }
    
    return groups;
  } catch (error) {
    Logger.log(`Error getting groups from tracking sheet: ${error}`);
    return [];
  }
}